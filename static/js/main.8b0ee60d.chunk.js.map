{"version":3,"sources":["components/Home/index.js","api.js","components/Filters/index.js","components/Question/index.js","components/AnswerList/index.js","components/Results/index.js","components/Play/index.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","className","href","rel","target","type","size","onClick","setSelected","categories","difficulties","types","getCategoryCode","cat","getDiffCode","diff","getTypeCode","ty","shuff","arr","i","length","j","Math","floor","random","temp","getData","a","fetch","then","res","json","answer_list","results","incorrect_answers","concat","correct_answer","decode","category","question","difficulty","toUpperCase","slice","Filters","useMediaQuery","maxWidth","direction","wrap","align","trigger","arrow","placement","overlay","style","maxHeight","overflowY","overflowX","map","Item","setCategory","width","DownOutlined","setDifficulty","setType","handleNextQuestion","Question","isMobile","questionCategory","color","diffColor","questionDiff","AnswerList","answers","ans","minWidth","block","handleAnswer","Results","correct_responses","incorrect_responses","isAnswered","display","id","correctAnswer","userAnswer","marginTop","loadingIcon","LoadingOutlined","fontSize","spin","Play","bottomOfScreen","useRef","useState","isLoaded","setIsLoaded","setQuestionCategory","setQuestion","setAnswers","setCorrectAnswer","setQuestionDiff","setQuestionType","setDiffColor","setUserAnswer","setIsAnswered","useEffect","getQuestion","q","corr","current","scrollIntoView","behavior","ref","indicator","Header","Layout","Content","Footer","App","selected","position","zIndex","marginBottom","theme","mode","defaultSelectedKeys","selectedKeys","toString","padding","textAlign","GithubFilled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b0ee60d.chunk.js","sourcesContent":["import { Divider, Button } from 'antd'\nimport 'antd/dist/antd.css'\nimport '../../App.css';\n\nconst Home = (props) => {\n    return (\n        <>\n            <div className=\"header-container\">\n                <h1 className=\"header\">Welcome to Trivia!</h1>\n            </div>\n            <Divider />\n            <div className=\"content-container\">\n                <div className=\"content\">\n                    <span className=\"paytone\">Trivia!</span> takes advantage of the <a href=\"https://opentdb.com/\" rel=\"noreferrer\" target=\"_blank\">Open Trivia Database</a> to provide you with a fun and challenging way to test your knowledge of the world!\n                </div>\n                <Button type=\"primary\" size=\"large\" onClick={() => props.setSelected(2)}>Play Now!</Button>\n            </div>\n        </>\n    )\n}\n\nexport default Home\n","import { decode } from 'html-entities'\n\nconst categories = [\n    'Any Category',\n    'General Knowledge',\n    'Books',\n    'Film',\n    'Music',\n    'Musicals & Theatres',\n    'Television',\n    'Video Games',\n    'Board Games',\n    'Science & Nature',\n    'Computers',\n    'Mathematics',\n    'Mythology',\n    'Sports',\n    'Geography',\n    'History',\n    'Politics',\n    'Art',\n    'Celebrities',\n    'Animals',\n    'Vehicles',\n    'Comics',\n    'Gadgets',\n    'Japanese Anime & Manga',\n    'Cartoon & Animations'\n]\n\nconst difficulties = [\n    'Any Difficulty',\n    'Easy',\n    'Medium',\n    'Hard'\n]\n\nconst types = [\n    'Any Type',\n    'Multiple Choice',\n    'True and False'\n]\n\nconst getCategoryCode = (cat) => {\n    switch(cat) {\n        case 'Any Category':\n            return null\n        case 'General Knowledge':\n            return 9\n        case 'Books':\n            return 10\n        case 'Film':\n            return 11\n        case 'Music':\n            return 12\n        case 'Musicals & Theatres':\n            return 13\n        case 'Television':\n            return 14\n        case 'Video Games':\n            return 15\n        case 'Board Games':\n            return 16\n        case 'Science & Nature':\n            return 17\n        case 'Computers':\n            return 18\n        case 'Mathematics':\n            return 19\n        case 'Mythology':\n            return 20\n        case 'Sports':\n            return 21\n        case 'Geography':\n            return 22\n        case 'History':\n            return 23\n        case 'Politics':\n            return 24\n        case 'Art':\n            return 25\n        case 'Celebrities':\n            return 26\n        case 'Animals':\n            return 27\n        case 'Vehicles':\n            return 28\n        case 'Comics':\n            return 29\n        case 'Gadgets':\n            return 30\n        case 'Japanese Anime & Manga':\n            return 31\n        case 'Cartoon & Animations':\n            return 32\n        default:\n            return null\n    }\n}\n\nconst getDiffCode = (diff) => {\n    switch(diff) {\n        case 'Any Difficulty':\n            return null\n        case 'Easy':\n            return 'easy'\n        case 'Medium':\n            return 'medium'\n        case 'Hard':\n            return 'hard'\n        default:\n            return null\n    }\n}\n\nconst getTypeCode = (ty) => {\n    switch(ty) {\n        case 'Any Type':\n            return null\n        case 'Multiple Choice':\n            return 'multiple'\n        case 'True and False':\n            return 'boolean'\n        default:\n            return null\n    }\n}\n\nconst shuff = (arr) => {\n    for(let i = 0; i < arr.length; i++) {\n        let j = Math.floor(Math.random() * (i + 1))\n        let temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n    }\n    return arr\n}\n\nconst getData = async (cat, diff, ty) => {\n    return fetch(`https://opentdb.com/api.php?amount=1${ getCategoryCode(cat) ? '&category=' + getCategoryCode(cat) : '' }${ getDiffCode(diff) ? '&difficulty=' + getDiffCode(diff) : '' }${ getTypeCode(ty) ? '&type=' + getTypeCode(ty) : '' }`)\n            .then(res => res.json())\n            .then(json => {\n                json = json.results[0]    \n\n                const answer_list = json.incorrect_answers.concat(json.correct_answer)\n                \n                for(let i = 0; i < answer_list.length; i++) {\n                    answer_list[i] = decode(answer_list[i])\n                }\n\n                return [\n                    decode(json.category),\n                    decode(json.question),\n                    shuff(answer_list),\n                    decode(json.correct_answer),\n                    decode(json.difficulty[0].toUpperCase() + json.difficulty.slice(1)),\n                    decode(json.type),\n                    json.difficulty === 'easy' ? 'green' : json.difficulty === 'medium' ? 'orange' : 'red'\n                ]\n            })\n}\n\nexport { categories, difficulties, types, getData }","import React from 'react'\nimport { Space, Dropdown, Button, Menu } from 'antd'\nimport { DownOutlined } from '@ant-design/icons';\nimport { useMediaQuery } from 'react-responsive';\n\nconst Filters = (props) => {\n\n    const isMobile = useMediaQuery({ maxWidth: 980 })\n\n    if(isMobile)\n        return (\n            <Space direction=\"vertical\" size=\"middle\" wrap align=\"center\">\n                <Dropdown  trigger={['click']} arrow placement=\"bottomLeft\" overlay={() => (\n                    <Menu style={{ maxHeight: '300px', overflowY: 'scroll', overflowX: 'hidden' }}>\n                        { props.categories.map((cat, i) => (\n                            <Menu.Item key={i} onClick={() => props.setCategory(cat)}>{ cat }</Menu.Item>\n                        ))}\n                    </Menu>\n                )}>\n                    <Button style={{ width: '50vw' }}>{ props.category }<DownOutlined /></Button>\n                </Dropdown>\n                <Dropdown  trigger={['click']} arrow placement=\"bottomLeft\" overlay={() => (\n                    <Menu>\n                        { props.difficulties.map((diff, i) => (\n                            <Menu.Item key={i} onClick={() => props.setDifficulty(diff)}>{ diff }</Menu.Item>\n                        ))}\n                    </Menu>\n                )}>\n                    <Button  trigger={['click']} arrow style={{ width: '50vw' }}>{ props.difficulty }<DownOutlined /></Button>\n                </Dropdown>\n                <Dropdown placement=\"bottomLeft\" overlay={() => (\n                    <Menu>\n                        { props.types.map((ty, i) => (\n                            <Menu.Item key={i} onClick={() => props.setType(ty)}>{ty}</Menu.Item>\n                        ))}\n                    </Menu>\n                )}>\n                    <Button style={{ width: '50vw' }}>{ props.type }<DownOutlined /></Button>\n                </Dropdown>\n                <Button type=\"primary\" style={{width: '50vw'}} onClick={props.handleNextQuestion}>Go</Button>\n            </Space>\n        )\n    else\n        return (\n            <Space direction=\"horizontal\" size=\"middle\" wrap align=\"center\">\n                <Dropdown trigger={['click']} arrow placement=\"bottomLeft\" overlay={() => (\n                    <Menu style={{ maxHeight: '300px', overflowY: 'scroll', overflowX: 'hidden' }}>\n                        { props.categories.map((cat, i) => (\n                            <Menu.Item key={i} onClick={() => props.setCategory(cat)}>{ cat }</Menu.Item>\n                        ))}\n                    </Menu>\n                )}>\n                    <Button style={{ width: '22vw' }}>{ props.category }<DownOutlined /></Button>\n                </Dropdown>\n                <Dropdown trigger={['click']} arrow placement=\"bottomLeft\" overlay={() => (\n                    <Menu>\n                        { props.difficulties.map((diff, i) => (\n                            <Menu.Item key={i} onClick={() => props.setDifficulty(diff)}>{ diff }</Menu.Item>\n                        ))}\n                    </Menu>\n                )}>\n                    <Button style={{ width: '15vw' }}>{ props.difficulty }<DownOutlined /></Button>\n                </Dropdown>\n                <Dropdown trigger={['click']} arrow placement=\"bottomLeft\" overlay={() => (\n                    <Menu>\n                        { props.types.map((ty, i) => (\n                            <Menu.Item key={i} onClick={() => props.setType(ty)}>{ty}</Menu.Item>\n                        ))}\n                    </Menu>\n                )}>\n                    <Button style={{ width: '15vw' }}>{ props.type }<DownOutlined /></Button>\n                </Dropdown>\n                <Button type=\"primary\" onClick={props.handleNextQuestion}>Go</Button>\n            </Space>\n        )\n}\n\nexport default Filters\n","import { useMediaQuery } from 'react-responsive';\n\nconst Question = (props) => {\n\n    const isMobile = useMediaQuery({ maxWidth: 980 });\n\n    return (\n        <div className=\"header-container\">\n            <h1 className={ !isMobile ? 'header-md' : 'header' }>{ props.question }</h1>\n            <h4 className=\"sub\">{ props.questionCategory } | <span style={{ color: props.diffColor }}>{ props.questionDiff }</span></h4>\n        </div>\n    )\n}\n\nexport default Question\n","import React from 'react'\nimport { Button, Space } from 'antd'\nimport { useMediaQuery } from 'react-responsive';\n\nconst AnswerList = (props) => {\n\n    const isMobile = useMediaQuery({ maxWidth: 980 })\n\n    if(isMobile)\n        return (\n            <Space direction=\"vertical\" size=\"middle\">\n            { props.answers.map((ans, i) => (\n                <Button key={i} style={{ minWidth: '50vw' }} block onClick={() => props.handleAnswer(ans)}>{ ans }</Button>\n            ))}\n            </Space>\n        )\n    else\n        return (\n            <Space direction=\"vertical\" size=\"middle\">\n                { props.answers.map((ans, i) => (\n                    <Button key={i} style={{ minWidth: '25vw' }} block onClick={() => props.handleAnswer(ans)}>{ ans }</Button>\n                ))}\n            </Space>\n    )\n}\n\nexport default AnswerList\n","import React from 'react'\nimport {Space, Divider, Button} from 'antd'\nimport { useMediaQuery } from 'react-responsive'\n\nconst Results = (props) => {\n\n    const correct_responses = [\n        'Correct!',\n        'You got it!',\n        'You are correct!',\n        'That\\'s right!',\n        'Good job!',\n    ]\n\n    const incorrect_responses = [\n        'Incorrect!',\n        'That\\'s not right!',\n        'Sorry, that\\'s not it!',\n        'Sorry, that\\'s incorrect!',\n        'Nope, that\\'s not it!'\n    ]\n\n    const isMobile = useMediaQuery({ maxWidth: 980 })\n\n    if(isMobile)\n        return (\n            <Space direction=\"vertical\" size=\"middle\">   \n                <div style={ props.isAnswered ? { display: 'block', width: '50vw' } : { display: 'none', width: '50vw' } }>\n                    <Divider id=\"results\" />\n                    {\n                        props.correctAnswer === props.userAnswer ? \n                            <h3 style={{ color: 'green' }}>{ correct_responses[Math.floor(Math.random() * correct_responses.length)] }</h3> \n                            : \n                            <>\n                                <h3 style={{ color: 'red' }}>Sorry, thats incorrect!</h3>\n                                <br />\n                                <p style={{ marginTop: '-30px' }} className=\"sub\">The correct answer was <b>{props.correctAnswer}</b></p>\n                            </>\n                    }\n                    <Button onClick={() =>props.handleNextQuestion()} type=\"primary\" style={{ width: '50vw' }}>Next Question</Button>\n                </div>\n            </Space>\n        )\n    else\n        return (\n            <Space direction=\"vertical\" size=\"middle\">   \n                <div style={ props.isAnswered ? { display: 'block' } : { display: 'none' } }>\n                    <Divider />\n                    {\n                        props.correctAnswer === props.userAnswer ? \n                            <h3 style={{ color: 'green' }}>{ correct_responses[Math.floor(Math.random() * correct_responses.length)] }</h3> \n                            : \n                            <>\n                                <h3 style={{ color: 'red' }}>{ incorrect_responses[Math.floor(Math.random() * incorrect_responses.length)] }</h3>\n                                <br />\n                                <p style={{ marginTop: '-30px' }} className=\"sub\">The correct answer was <b>{props.correctAnswer}</b></p>\n                            </>\n                    }\n                    <Button onClick={() =>props.handleNextQuestion()} type=\"primary\" style={{ width: '50vh' }}>Next Question</Button>\n                </div>\n            </Space>\n        )\n}\n\nexport default Results\n","import { useState, useEffect, useRef } from 'react'\nimport { Space, Divider } from 'antd'\nimport { categories, difficulties, types, getData } from '../../api';\nimport { Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport Filters from '../Filters'\nimport Question from '../Question';\nimport AnswerList from '../AnswerList';\nimport Results from '../Results';\n\nconst loadingIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />\n\nconst Play = () => {\n\n    const bottomOfScreen = useRef(null)\n\n    const [ category, setCategory ] = useState('Any Category')\n    const [ difficulty, setDifficulty ] = useState('Any Difficulty')\n    const [ type, setType ] = useState('Any Type')\n\n    const [ isLoaded, setIsLoaded ] = useState(false)\n\n    const [ questionCategory, setQuestionCategory ] = useState('')\n    const [ question, setQuestion ] = useState('')\n    const [ answers, setAnswers ] = useState([])\n    const [ correctAnswer, setCorrectAnswer ] = useState('')\n    const [ questionDiff, setQuestionDiff ] = useState('')\n    const [ questionType, setQuestionType ] = useState('')\n    const [ diffColor, setDiffColor ] = useState('green')\n    const [ userAnswer, setUserAnswer ] = useState('')\n    const [ isAnswered, setIsAnswered ] = useState(false)\n\n    useEffect(() => {\n        setIsAnswered(false)\n        setUserAnswer('')\n        getQuestion()\n    }, [])\n\n    const getQuestion = async () => {\n        setIsLoaded(false)\n        const [cat, q, ans, corr, diff, ty, color] = await getData(category, difficulty, type)\n        setQuestionCategory(cat)\n        setQuestion(q)\n        setAnswers(ans)\n        setCorrectAnswer(corr)\n        setQuestionDiff(diff)\n        setQuestionType(ty)\n        setDiffColor(color)\n        setIsLoaded(true)\n    }\n\n    const handleAnswer = (ans) => {\n        if(!isAnswered){\n            setUserAnswer(ans)\n            setIsAnswered(true)\n            bottomOfScreen.current?.scrollIntoView({ behavior: 'smooth' })\n        }\n    }\n\n    const handleNextQuestion = () => {\n        setIsAnswered(false)\n        setUserAnswer('')\n        getQuestion()\n    }\n\n    return (\n        <div className=\"play-container\">\n            <Filters \n                categories={categories} category={category} setCategory={setCategory} \n                difficulties={difficulties} difficulty={difficulty} setDifficulty={setDifficulty}\n                types={types} type={type} setType={setType}\n                handleNextQuestion={handleNextQuestion}\n            />\n            <Divider />\n            { isLoaded ? \n                <>\n                    <Question \n                        question={question} \n                        questionCategory={questionCategory}\n                        questionDiff={questionDiff}\n                        diffColor={diffColor}\n                    />\n                    <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\n                        <AnswerList answers={answers} handleAnswer={handleAnswer} userAnswer={userAnswer} />\n                        <Results correctAnswer={correctAnswer} isAnswered={isAnswered} userAnswer={userAnswer} handleNextQuestion={handleNextQuestion} />\n                    </Space>\n                    <div ref={bottomOfScreen} />\n                </>\n            :\n                <Spin indicator={loadingIcon} />\n            }\n            \n        </div>\n    )\n}\n\nexport default Play\n","import { useState } from 'react'\nimport { Layout, Menu } from 'antd'\nimport Home from './components/Home'\nimport Play from './components/Play'\nimport { GithubFilled } from '@ant-design/icons';\nimport 'antd/dist/antd.css'\nimport './App.css';\n\nconst { Header, Content, Footer } = Layout;\n\nfunction App() {\n\n  const [ selected, setSelected ] = useState(1)\n\n  return (\n    <Layout className=\"layout\">\n      <Header style={{ position: 'fixed', zIndex: 1, width: '100%', marginBottom: 24 }}>\n        <div className=\"logo\">Trivia!</div>\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']} selectedKeys={selected.toString()}>\n          <Menu.Item key=\"1\" onClick={() => setSelected(1)}>Home</Menu.Item>\n          <Menu.Item key=\"2\" onClick={() => setSelected(2)}>Play</Menu.Item>\n        </Menu>\n      </Header>\n      <Content style={{ padding: '50px 50px 0 50px' }}>\n        <div className=\"site-layout-content\">\n          { \n            selected === 1 ? <Home setSelected={setSelected} /> :\n            selected === 2 && <Play /> \n          }\n        </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Trivia! ©2021 Created by Ethan Shealey | <a href=\"https://www.github.com/ethanshealey/ReactTrivia\" target=\"_blank\" rel=\"noreferrer\" ><GithubFilled style={{ color: 'black' }}/></a></Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}