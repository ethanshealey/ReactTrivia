{"version":3,"sources":["components/Home/index.js","api.js","components/Play/index.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","className","href","target","type","size","onClick","setSelected","categories","difficulties","types","getCategoryCode","cat","getDiffCode","diff","getTypeCode","ty","shuff","arr","i","length","j","Math","floor","random","temp","getData","a","fetch","then","res","json","answer_list","results","incorrect_answers","concat","correct_answer","decode","category","question","difficulty","toUpperCase","slice","antIcon","LoadingOutlined","style","fontSize","spin","Play","useState","setCategory","setDifficulty","setType","isLoaded","setIsLoaded","questionCategory","setQuestionCategory","setQuestion","answers","setAnswers","correctAnswer","setCorrectAnswer","questionDiff","setQuestionDiff","setQuestionType","diffColor","setDiffColor","userAnswer","setUserAnswer","isAnswered","setIsAnswered","useEffect","getQuestion","q","ans","corr","color","handleNextQuestion","direction","wrap","align","placement","overlay","map","Item","width","DownOutlined","minWidth","block","handleAnswer","display","marginTop","indicator","Header","Layout","Content","Footer","App","selected","theme","mode","defaultSelectedKeys","selectedKeys","toString","padding","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7a9a375.chunk.js","sourcesContent":["import { useState} from 'react'\nimport { Divider, Button } from 'antd'\nimport 'antd/dist/antd.css'\nimport '../../App.css';\n\nconst Home = (props) => {\n    return (\n        <>\n            <div className=\"header-container\">\n                <h1 className=\"header\">Welcome to Trivia!</h1>\n            </div>\n            <Divider />\n            <div className=\"content-container\">\n                <div className=\"content\">\n                    <span className=\"paytone\">Trivia!</span> takes advantage of the <a href=\"https://opentdb.com/\" target=\"_blank\">Open Trivia Database</a> to provide you with a fun and challenging way to test your knowledge of the world!\n                </div>\n                <Button type=\"primary\" size=\"large\" onClick={() => props.setSelected(2)}>Play Now!</Button>\n            </div>\n        </>\n    )\n}\n\nexport default Home\n","import { decode } from 'html-entities'\n\nconst categories = [\n    'Any Category',\n    'General Knowledge',\n    'Books',\n    'Film',\n    'Music',\n    'Musicals & Theatres',\n    'Television',\n    'Video Games',\n    'Board Games',\n    'Science & Nature',\n    'Computers',\n    'Mathematics',\n    'Mythology',\n    'Sports',\n    'Geography',\n    'History',\n    'Politics',\n    'Art',\n    'Celebrities',\n    'Animals',\n    'Vehicles',\n    'Comics',\n    'Gadgets',\n    'Japanese Anime & Manga',\n    'Cartoon & Animations'\n]\n\nconst difficulties = [\n    'Any Difficulty',\n    'Easy',\n    'Medium',\n    'Hard'\n]\n\nconst types = [\n    'Any Type',\n    'Multiple Choice',\n    'True and False'\n]\n\nconst getCategoryCode = (cat) => {\n    switch(cat) {\n        case 'Any Category':\n            return null\n        case 'General Knowledge':\n            return 9\n        case 'Books':\n            return 10\n        case 'Film':\n            return 11\n        case 'Music':\n            return 12\n        case 'Musicals & Theatres':\n            return 13\n        case 'Television':\n            return 14\n        case 'Video Games':\n            return 15\n        case 'Board Games':\n            return 16\n        case 'Science & Nature':\n            return 17\n        case 'Computers':\n            return 18\n        case 'Mathematics':\n            return 19\n        case 'Mythology':\n            return 20\n        case 'Sports':\n            return 21\n        case 'Geography':\n            return 22\n        case 'History':\n            return 23\n        case 'Politics':\n            return 24\n        case 'Art':\n            return 25\n        case 'Celebrities':\n            return 26\n        case 'Animals':\n            return 27\n        case 'Vehicles':\n            return 28\n        case 'Comics':\n            return 29\n        case 'Gadgets':\n            return 30\n        case 'Japanese Anime & Manga':\n            return 31\n        case 'Cartoon & Animations':\n            return 32\n    }\n}\n\nconst getDiffCode = (diff) => {\n    switch(diff) {\n        case 'Any Difficulty':\n            return null\n        case 'Easy':\n            return 'easy'\n        case 'Medium':\n            return 'medium'\n        case 'Hard':\n            return 'hard'\n    }\n}\n\nconst getTypeCode = (ty) => {\n    switch(ty) {\n        case 'Any Type':\n            return null\n        case 'Multiple Choice':\n            return 'multiple'\n        case 'True and False':\n            return 'boolean'\n    }\n}\n\nconst shuff = (arr) => {\n    for(let i = 0; i < arr.length; i++) {\n        let j = Math.floor(Math.random() * (i + 1))\n        let temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n    }\n    return arr\n}\n\nconst getData = async (cat, diff, ty) => {\n    return fetch(`https://opentdb.com/api.php?amount=1${ getCategoryCode(cat) ? '&category=' + getCategoryCode(cat) : '' }${ getDiffCode(diff) ? '&difficulty=' + getDiffCode(diff) : '' }${ getTypeCode(ty) ? '&type=' + getTypeCode(ty) : '' }`)\n            .then(res => res.json())\n            .then(json => {\n                json = json.results[0]    \n\n                const answer_list = json.incorrect_answers.concat(json.correct_answer)\n                \n                for(let i = 0; i < answer_list.length; i++) {\n                    answer_list[i] = decode(answer_list[i])\n                }\n\n                return [\n                    decode(json.category),\n                    decode(json.question),\n                    shuff(answer_list),\n                    decode(json.correct_answer),\n                    decode(json.difficulty[0].toUpperCase() + json.difficulty.slice(1)),\n                    decode(json.type),\n                    json.difficulty === 'easy' ? 'green' : json.difficulty === 'medium' ? 'orange' : 'red'\n                ]\n            })\n}\n\nexport { categories, difficulties, types, getData }","import { useState, useEffect } from 'react'\nimport { Space, Dropdown, Button, Menu, Divider, Progress } from 'antd'\nimport { DownOutlined } from '@ant-design/icons';\nimport { categories, difficulties, types, getData } from '../../api';\nimport { Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nconst Play = () => {\n\n    const [ category, setCategory ] = useState('Any Category')\n    const [ difficulty, setDifficulty ] = useState('Any Difficulty')\n    const [ type, setType ] = useState('Any Type')\n\n    const [ isLoaded, setIsLoaded ] = useState(false)\n\n    const [ questionCategory, setQuestionCategory ] = useState('')\n    const [ question, setQuestion ] = useState('')\n    const [ answers, setAnswers ] = useState([])\n    const [ correctAnswer, setCorrectAnswer ] = useState('')\n    const [ questionDiff, setQuestionDiff ] = useState('')\n    const [ questionType, setQuestionType ] = useState('')\n    const [ diffColor, setDiffColor ] = useState('green')\n    const [ userAnswer, setUserAnswer ] = useState('')\n    const [ isAnswered, setIsAnswered ] = useState(false)\n\n    useEffect(() => {\n        getQuestion()\n    }, [])\n\n    const getQuestion = async () => {\n        setIsLoaded(false)\n        const [cat, q, ans, corr, diff, ty, color] = await getData(category, difficulty, type)\n        setQuestionCategory(cat)\n        setQuestion(q)\n        setAnswers(ans)\n        setCorrectAnswer(corr)\n        setQuestionDiff(diff)\n        setQuestionType(ty)\n        setDiffColor(color)\n        setIsLoaded(true)\n    }\n\n    const handleAnswer = (ans) => {\n        if(!isAnswered){\n            setUserAnswer(ans)\n            setIsAnswered(true)\n        }\n    }\n\n    const handleNextQuestion = () => {\n        setIsAnswered(false)\n        setUserAnswer('')\n        getQuestion()\n    }\n\n    return (\n        <div className=\"play-container\">\n            <Space direction=\"horizontal\" size=\"middle\" wrap align=\"center\">\n                <Dropdown placement=\"bottomLeft\" overlay={() => (\n                    <Menu>\n                        { categories.map((cat, i) => (\n                            <Menu.Item key={i} onClick={() => setCategory(cat)}>{ cat }</Menu.Item>\n                        ))}\n                    </Menu>\n                )}>\n                    <Button style={{ width: '50vh' }}>{ category }<DownOutlined /></Button>\n                </Dropdown>\n                <Dropdown placement=\"bottomLeft\" overlay={() => (\n                    <Menu>\n                        { difficulties.map((diff, i) => (\n                            <Menu.Item key={i} onClick={() => setDifficulty(diff)}>{ diff }</Menu.Item>\n                        ))}\n                    </Menu>\n                )}>\n                    <Button style={{ width: '25vh' }}>{ difficulty }<DownOutlined /></Button>\n                </Dropdown>\n                <Dropdown placement=\"bottomLeft\" overlay={() => (\n                    <Menu>\n                        { types.map((ty, i) => (\n                            <Menu.Item key={i} onClick={() => setType(ty)}>{ty}</Menu.Item>\n                        ))}\n                    </Menu>\n                )}>\n                    <Button style={{ width: '25vh' }} >{ type }<DownOutlined /></Button>\n                </Dropdown>\n                <Button type=\"primary\" onClick={handleNextQuestion}>Go</Button>\n            </Space>\n            <Divider />\n            { isLoaded ? \n            <>\n                <div className=\"header-container\">\n                    <h1 className=\"header-md\">{ question }</h1>\n                    <h4 className=\"sub\">{ questionCategory } | <span style={{ color: diffColor }}>{ questionDiff }</span></h4>\n                </div>\n                <Space direction=\"vertical\" size=\"middle\">\n                    { answers.map((ans, i) => (\n                        <Button key={i} style={{ minWidth: '50vh' }} block onClick={() => handleAnswer(ans)}>{ ans }</Button>\n                    ))}\n                    <div style={ isAnswered ? { display: 'block' } : { display: 'none' } }>\n                        <Divider />\n                        {\n                            correctAnswer === userAnswer ? \n                                <h3 style={{ color: 'green' }}>Thats right!</h3> \n                                : \n                                <>\n                                    <h3 style={{ color: 'red' }}>Sorry, thats incorrect!</h3>\n                                    <br />\n                                    <p style={{ marginTop: '-30px' }} className=\"sub\">The correct answer was <b>{correctAnswer}</b></p>\n                                </>\n                        }\n                        <Button onClick={() => handleNextQuestion()} type=\"primary\" style={{ width: '50vh' }}>Next Question</Button>\n                    </div>\n                </Space>\n            </>\n            :\n                <Spin indicator={antIcon} />\n            }\n            \n        </div>\n    )\n}\n\nexport default Play\n","import { useState } from 'react'\nimport { Layout, Menu } from 'antd'\nimport Home from './components/Home'\nimport Play from './components/Play'\nimport 'antd/dist/antd.css'\nimport './App.css';\n\nconst { Header, Content, Footer } = Layout;\n\nfunction App() {\n\n  const [ selected, setSelected ] = useState(1)\n\n  return (\n    <Layout className=\"layout\">\n      <Header>\n        <div className=\"logo\">Trivia!</div>\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']} selectedKeys={selected.toString()}>\n          <Menu.Item key=\"1\" onClick={() => setSelected(1)}>Home</Menu.Item>\n          <Menu.Item key=\"2\" onClick={() => setSelected(2)}>Play</Menu.Item>\n          <Menu.Item key=\"3\" onClick={() => setSelected(3)}>About</Menu.Item>\n        </Menu>\n      </Header>\n      <Content style={{ padding: '50px 50px 0 50px' }}>\n        <div className=\"site-layout-content\">\n          { \n            selected === 1 ? <Home setSelected={setSelected} /> :\n            selected === 2 ? <Play /> :\n            selected === 3 && <h3>About</h3>\n          }\n        </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Trivia! ©2021 Created by Ethan Shealey</Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}